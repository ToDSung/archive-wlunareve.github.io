import{o as e,b as n,y as t}from"./vendor.a9e5c092.js";const a={class:"markdown-body"},s=t('<h1>簡單閱讀 dayjs 原始碼 (一)</h1><h3>筆者小牢騷</h3><p>這是我第一次的閱讀公開原始碼文章，如果有寫得不好的地方都歡迎來信告知！</p><h3>起源</h3><p>JavaScript 的 Date API 應是眾所皆知的難用，筆者平常在上班時候，因為覺得簡單的程式碼，不太需要安裝套件，所以就沒有安裝任何時間套件，最近因為同事們專案中都自己偷偷使用時間函式庫，所以也受不了，一用之下才發現驚為天人，寫起來也太輕鬆了吧！</p><p>不過回過頭來反思，雖然自己用的愉快，但重要的是了解這些 library 做了哪些事情，才不會陷入只會使用工具的境地，因此這篇文章主要是想看看 dayjs 做了哪些事情，以及學習現代 open source library 開發該注意的事情。</p><h3>為什麼選擇 dayjs</h3><ol><li>dayjs 有個 slogan 說他們是最小的函式庫</li><li>dayjs 的 github stars 數量算蠻多的</li><li>moment.js 已經停止維護了</li></ol><h3>進入正題</h3><p>既然選擇了 dayjs ， 發揮一點 geek 精神，來看一下，程式碼到底做了些什麼吧！</p><pre><code class="language-javascript=">/dayjs/src/index.js\n</code></pre><p>這支檔案是整個 dayjs 專案的進入點，整支檔案的目的是用來 init dayjs</p><h3>dayjs function</h3><p>當我們執行 dayjs() 時，會建立一個擁有很多操作時間方法的大物件，我們先討論 5~9 行的內容，而實際使用 dayjs() 時，</p><ul><li>第一個 arg： <b>date</b> 是被 parse 的時間格式變數</li><li>第二個 arg： <b>c</b> 則做為一個 準備承接物件 config 參數的變數使用</li><li><b>arguments</b> 表示這個 function 的所有輸入參數</li></ul><pre><code class="language-javascript=">const dayjs = function (date, c) {\n  if (isDayjs(date)) {\n    return date.clone()\n  }\n  // eslint-disable-next-line no-nested-ternary\n  const cfg = typeof c === &#39;object&#39; ? c : {}\n  cfg.date = date\n  cfg.args = arguments// eslint-disable-line prefer-rest-params\n  return new Dayjs(cfg) // eslint-disable-line no-use-before-define\n}\n</code></pre><h3>parse function</h3><p>第九行利用 class 建立的物件，將 cfg 帶入 parse 函式，之後執行 <b>parseDate</b> 函式</p><pre><code class="language-javascript=">class Dayjs {\n  constructor(cfg) {\n    this.$L = parseLocale(cfg.locale, null, true)\n    this.parse(cfg) // for plugin\n  }\n  \n  parse(cfg) {\n    this.$d = parseDate(cfg)\n    this.$x = cfg.x || {}\n    this.init()\n  }\n}\n</code></pre><p>重頭戲來了！在經歷了說短不短的 init 過程以後，我們終於看到 new Date 函式了，仔細來看看　parseDate 函式做了些什麼工作吧！</p><pre><code class="language-javascript=">/dayjs/src/index.js\nconst parseDate = (cfg) =&gt; {\n  const { date, utc } = cfg\n  if (date === null) return new Date(NaN) // null is invalid\n  if (Utils.u(date)) return new Date() // today\n  if (date instanceof Date) return new Date(date)\n  if (typeof date === &#39;string&#39; &amp;&amp; !/Z$/i.test(date)) {\n    const d = date.match(C.REGEX_PARSE)\n    if (d) {\n      const m = d[2] - 1 || 0\n      const ms = (d[7] || &#39;0&#39;).substring(0, 3)\n      if (utc) {\n        return new Date(Date.UTC(d[1], m, d[3]\n          || 1, d[4] || 0, d[5] || 0, d[6] || 0, ms))\n      }\n      return new Date(d[1], m, d[3]\n          || 1, d[4] || 0, d[5] || 0, d[6] || 0, ms)\n    }\n  }\n\n  return new Date(date) // everything else\n}\n</code></pre><ol><li><p>如果 date 傳入的是 null ， function 會執行 new Date(NaN)，這在 chrome 得到的結果是 Invalid Date <img src="https://i.imgur.com/y6w0VE3.png" alt=""></p></li><li><p>Utils.u 是從 utils 會確認傳入的 date === undefined，如果是 true 會執行 new Date()，這樣得到的是現在的時間實例</p><pre><code class="language-javascript=">/dayjs/src/utils.js\nconst isUndefined = s =&gt; s === undefined\nexport default {\n  u: isUndefined\n}\n</code></pre><p><img src="https://i.imgur.com/yQQDSTE.png" alt=""></p></li><li><p>如果傳入的是 Date 的實例，可以直接將 date 帶入 new Date(date) <img src="https://i.imgur.com/kVp4Rch.png" alt=""></p></li><li><p>重頭戲來囉，如果 date 型別是 string 而且 string 中不含 Z 的話，</p><ol><li>執行 dayjs 的 regex 檢查來把 date parse 好，</li><li>m (月份)，因為 js 的月份是從 0~11 開始，第 4 行透過 -1 的方式計算月份 value 要注意的是值會轉型成 nubmer 變數，</li><li>ms (毫秒) 僅留前三位，完成以後就能根據 new Date 的丟數個參數的方式，得到最終的 Date 實例。</li></ol><pre><code class="language-javascript=">export const REGEX_PARSE = /^(\\d{4})[-/]?(\\d{1,2})?[-/]?(\\d{0,2})[Tt\\s]*(\\d{1,2})?:?(\\d{1,2})?:?(\\d{1,2})?[.:]?(\\d+)?$/\n\nif (d) {\n  const m = d[2] - 1 || 0 // month \n  const ms = (d[7] || &#39;0&#39;).substring(0, 3) \n  if (utc) {\n    return new Date(Date.UTC(d[1], m, d[3]\n      || 1, d[4] || 0, d[5] || 0, d[6] || 0, ms))\n  }\n  return new Date(d[1], m, d[3]\n      || 1, d[4] || 0, d[5] || 0, d[6] || 0, ms)\n}\n</code></pre><p><img src="https://i.imgur.com/GNg47En.png" alt=""></p></li></ol><h3>init function</h3><p>parse function 執行完成以後，緊隨著執行的是 <b>init</b>，這邊的 $date 已經被轉成 js Date 的實例，因此可以呼叫 Date 的任意 function，到這邊為止，我們終於得到了全部日期時間的變數！！</p><pre><code class="language-javascript=">class Dayjs {\n  init() {\n    const { $d } = this\n    this.$y = $d.getFullYear()\n    this.$M = $d.getMonth()\n    this.$D = $d.getDate()\n    this.$W = $d.getDay()\n    this.$H = $d.getHours()\n    this.$m = $d.getMinutes()\n    this.$s = $d.getSeconds()\n    this.$ms = $d.getMilliseconds()\n  }\n</code></pre><h2>結論</h2><p>在經過了一整段的 class 實例化過程以後，我們目前可以知道 dayjs 所做的事情是提供 new Date 一個新的包裝，他提供了更多的 pasre New Date 的方式，下一篇文章我們會開始討論，得到了這些所有的日期時間變數以後， dayjs 又是怎麼完成一個個其它方便好用的 function！！</p>',27),i={setup:(t,{expose:i})=>(i({frontmatter:{}}),(t,i)=>(e(),n("div",a,[s])))};export default i;
