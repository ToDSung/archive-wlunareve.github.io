import{o as e,c as n,q as o}from"./vendor.c5044101.js";const t={class:"markdown-body"},r=o('<h1>公司專案的 css variable 寫法</h1><h2>套件</h2><p>使用 vue2 + vuetify2 + scss + webpack5</p><h2>scss (recommend)</h2><p><strong>優點</strong> 搭配 .vue scoped 不容易汙染 import 也相對簡單</p><p><strong>缺點</strong> 相對後面的方法暫時沒想到什麼問題，(因為相對單純)</p><p><strong>用法</strong> 使用 $ 號宣告</p><pre><code class="language-scss">$grey: #a2a2a2;\n$orange: #f39800;\n\nh2 {\n  font-size: 1rem;\n  color: $grey;\n  border-left: 5px solid $orange;\n  padding-left: 10px;\n  letter-spacing: 2px;\n  margin: 30px 0 15px;\n  line-height: 1rem;\n}\n</code></pre><p>出來的效果 <img src="https://i.imgur.com/V8DzrU4.png" alt=""></p><h2>搭配 vue 用 js</h2><p><strong>優點</strong> 適合用來處理搭配 js 的邏輯運算</p><p><strong>缺點</strong> 子元件會一直繼承下去，所以要小心汙染</p><p><strong>用法</strong> 分別寫在 .vue 中三個區塊</p><pre><code class="language-html=">&lt;template&gt;\n    &lt;main id=&quot;main&quot; :style=&quot;css_props&quot;&gt;\n    &lt;/main&gt;\n&lt;/tempate&gt;\n</code></pre><pre><code class="language-javascript=">computed: {\n    css_props() {\n        return {\n            &#39;--container-background-color&#39;: this.last_selected_main_menu === &#39;emap&#39; ? &#39;#000000&#39; : &#39;#ffffff&#39;,\n            &#39;--app-height&#39;: `${this.app_height}px`,\n        } \n    },\n}\n</code></pre><pre><code class="language-scss=">.main-block-options {\n    &amp;__background {\n        height: 100vh;\n        background: var(--container-background-color);\n        touch-action: none;\n    }\n}\n</code></pre><h2>傳統作法</h2><p><strong>優點&amp;&amp;缺點</strong> 整個網頁都會吃到這些 css 變數，好處就是大家都能用，壞處就是可能會重複命名導致汙染 建議可以擁有一個自己的命名模式</p><p><strong>用法</strong> 寫一個 css or scss 檔案</p><pre><code class="language-css=">:root {\n    --grey-pipe: #b3b7c4;\n    --white-bg: #e8ecf7;\n    --white-border: #e9edf1;\n    --grey-border: #e8ecf7;\n    --grey-border-darken: #b3b7c4;\n    --linear-gradient-color: linear-gradient(47deg, #304476 7%, #319da9 92%);\n    --linear-gradient-color-1: linear-gradient(83deg, #304476 20%, #319da9 83%);\n    --base-dark-blue: #191f35;\n    --base-blue: #2366f8;\n    --base-blue-lighten: #4f85fa;\n    --base-red: #ee3934;\n    --base-orange: #eda12f;\n    --base-yellow: #f1d94a;\n    --base-gray: #454d66;\n    --base-gray-darken: #353b4e;\n    --aqua-active: #2cfde1;\n    --base_black: #121624;\n    --signs-green: #039d78;\n    --signs-blue: #2366f8;\n}\n</code></pre><p>從 script.js import 就行，放在 .vue 檔也 ok</p><pre><code class="language-java=">import &#39;../css/root.scss&#39;\n</code></pre><p>使用的時候，就寫 var(variable-name)</p><pre><code class="language-scss">&amp;__btn {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: relative;\n    cursor: pointer;\n    color: var(--grey-pipe);\n\n    &amp;--active {\n        color: var(--aqua-active);\n    }\n}\n</code></pre><h2>搭配 vuetify</h2><p><strong>優點</strong> 能夠快速啟用幾個相近的顏色，做好不錯的風格</p><p><strong>缺點</strong> 被使用的框架限制(其實就是使用框架的缺點)</p><p><strong>用法</strong> options 中 customPropertiies 設為 true 在進入點 import vuetify 時， 添加新的 theme 變數，</p><pre><code class="language-javascript=">import Vue from &quot;vue&quot;;\nimport App from &quot;./App.vue&quot;;\nimport Vuetify from &quot;vuetify/lib&quot;;\n\nVue.use(Vuetify);\n\nconst opts = {\n  theme: {\n    options: { customProperties: true },\n    themes: {\n      light: {\n        red: &quot;#c50818&quot;,\n        orange: &quot;#F39800&quot;,\n      },\n    },\n  },\n};\n\nnew Vue({\n  vuetify: new Vuetify(opts),\n  el: &quot;#app&quot;,\n  components: {\n    App: App,\n  },\n});\n\n</code></pre><p>就可以在 dev tool 中看到變數 <img src="https://i.imgur.com/TEVr7QL.png" alt=""></p>',30),s={setup:(o,{expose:s})=>(s({frontmatter:{}}),(o,s)=>(e(),n("div",t,[r])))};export default s;
