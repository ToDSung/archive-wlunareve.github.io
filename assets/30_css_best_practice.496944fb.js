import{o as e,c as t,q as s}from"./vendor.c5044101.js";const n={class:"markdown-body"},o=s('<h1>30 css best practice</h1><p><a href="https://code.tutsplus.com/tutorials/30-css-best-practices-for-beginners--net-6741">https://code.tutsplus.com/tutorials/30-css-best-practices-for-beginners--net-6741</a></p><p>僅記錄還不曾實踐的做法</p><h2>1. Organize the Stylesheet With a Top-Down Structure</h2><p>建議可以根據 source code 去排序 css 的撰寫順序</p><pre><code>body, a, p, h1 {\n\n}\n#header {\n\n}\n#nav-menu {\n\n}\n#main-content{\n\n}\n</code></pre><h2>2. utility base or components base css</h2><p>Tailwind css 的模式是 utility base 的 css 改動可以更簡單</p><p>目前我使用的 bem 命名方式是 components base 的 css 缺點是會寫重複的 css 相應的打包時也會有更大的大小</p><h2>3. Use the Right Doctype</h2><p>//  使用 html5 時添加這個，向瀏覽器宣告這份文件是 html5</p><h2>4. Understand the Difference Between Block and Inline Elements</h2><p>Here are the lists of elements that are typically inline:</p><p>inline 元素</p><pre><code>span, a, strong, em, img, br, input, abbr, acronym\n</code></pre><p>block 元素</p><pre><code>div, h1...h6, p, ul, li, table, blockquote, pre, form\n</code></pre><h2>5. Use Absolute Positioning Sparingly</h2><p>謹慎使用絕對定位，太多的絕對定位會使得網頁布局太亂</p><h2>6. Avoid Extra Selectors</h2><p>使用過多的 selector，除了 code 的複雜度更高，瀏覽器搜尋的效率也會更差</p>',21),p={setup:(s,{expose:p})=>(p({frontmatter:{}}),(s,p)=>(e(),t("div",n,[o])))};export default p;
